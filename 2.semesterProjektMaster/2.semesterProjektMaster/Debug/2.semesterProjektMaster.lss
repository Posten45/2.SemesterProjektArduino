
2.semesterProjektMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000035e  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000038d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000039b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a42  00000000  00000000  000003f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d60  00000000  00000000  00001e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006fd  00000000  00000000  00002b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00003294  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  00003328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ec  00000000  00000000  0000370e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00003efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002dc  000002dc  00000350  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000044  00000240  00000240  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.setup   00000008  000002d4  000002d4  00000348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.digitalWrite 0000003a  00000284  00000284  000002f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.step    00000140  00000100  00000100  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  000002e4  000002e4  00000358  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  000002e6  000002e6  0000035a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  000002e8  000002e8  0000035c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  000002be  000002be  00000332  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  000002e0  000002e0  00000354  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
   8:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
   c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  10:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  14:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  18:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  1c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  20:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  24:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  28:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  2c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  30:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  34:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  38:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  3c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  40:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  44:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  48:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  4c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  50:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  54:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  58:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  5c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  60:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  64:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  68:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  6c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  70:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  74:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  78:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  7c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  80:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  84:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  88:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  8c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  90:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  94:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  98:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  9c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  a0:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  a4:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  a8:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  ac:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  b0:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  b4:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  b8:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  bc:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  c0:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  c4:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  c8:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  cc:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  d0:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  d4:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  d8:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  dc:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  e0:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	0e 94 20 01 	call	0x240	; 0x240 <main>
  f8:	0c 94 5f 01 	jmp	0x2be	; 0x2be <exit>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>

Disassembly of section .text:

000002dc <__bad_interrupt>:
 2dc:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000240 <main>:
#include <xc.h>
#include "motor.h"

int main(void)
{
    setup();
 240:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setup>
	step(5000, 1);
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	88 e8       	ldi	r24, 0x88	; 136
 248:	93 e1       	ldi	r25, 0x13	; 19
 24a:	0e 94 80 00 	call	0x100	; 0x100 <__data_load_end>
	step(-5000, 1);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	88 e7       	ldi	r24, 0x78	; 120
 252:	9c ee       	ldi	r25, 0xEC	; 236
 254:	0e 94 80 00 	call	0x100	; 0x100 <__data_load_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	83 e2       	ldi	r24, 0x23	; 35
 25c:	94 ef       	ldi	r25, 0xF4	; 244
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <main+0x1e>
 266:	00 c0       	rjmp	.+0      	; 0x268 <main+0x28>
 268:	00 00       	nop
	_delay_ms(5000);
	step(5000, 0);
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	88 e8       	ldi	r24, 0x88	; 136
 26e:	93 e1       	ldi	r25, 0x13	; 19
 270:	0e 94 80 00 	call	0x100	; 0x100 <__data_load_end>
	step(-5000, 0);
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	88 e7       	ldi	r24, 0x78	; 120
 278:	9c ee       	ldi	r25, 0xEC	; 236
 27a:	0e 94 80 00 	call	0x100	; 0x100 <__data_load_end>
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	08 95       	ret

Disassembly of section .text.setup:

000002d4 <setup>:
#include "Motor.h"

// Initialiser pins som output
void setup() {
	// Sæt STEP_PIN1, DIR_PIN1, STEP_PIN2 og DIR_PIN2 som output
	DDRB |= (1 << STEP_PIN1) | (1 << DIR_PIN1) | (1 << STEP_PIN2) | (1 << DIR_PIN2);
 2d4:	84 b1       	in	r24, 0x04	; 4
 2d6:	8f 60       	ori	r24, 0x0F	; 15
 2d8:	84 b9       	out	0x04, r24	; 4
 2da:	08 95       	ret

Disassembly of section .text.digitalWrite:

00000284 <digitalWrite>:
}

// Skriv HIGH eller LOW til en pin
void digitalWrite(uint8_t pin, uint8_t state) {
	if (state) {
 284:	66 23       	and	r22, r22
 286:	69 f0       	breq	.+26     	; 0x2a2 <digitalWrite+0x1e>
		PORTB |= (1 << pin);  // Sæt pin HIGH
 288:	45 b1       	in	r20, 0x05	; 5
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	b9 01       	movw	r22, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <digitalWrite+0x12>
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	8a 95       	dec	r24
 298:	e2 f7       	brpl	.-8      	; 0x292 <digitalWrite+0xe>
 29a:	cb 01       	movw	r24, r22
 29c:	84 2b       	or	r24, r20
 29e:	85 b9       	out	0x05, r24	; 5
 2a0:	08 95       	ret
		} else {
		PORTB &= ~(1 << pin); // Sæt pin LOW
 2a2:	45 b1       	in	r20, 0x05	; 5
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	b9 01       	movw	r22, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <digitalWrite+0x2c>
 2ac:	66 0f       	add	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	8a 95       	dec	r24
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <digitalWrite+0x28>
 2b4:	cb 01       	movw	r24, r22
 2b6:	80 95       	com	r24
 2b8:	84 23       	and	r24, r20
 2ba:	85 b9       	out	0x05, r24	; 5
 2bc:	08 95       	ret

Disassembly of section .text.step:

00000100 <step>:
	}
}

void step(int16_t number_of_steps, unsigned char motor){
 100:	ff 92       	push	r15
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	ec 01       	movw	r28, r24
 10c:	f6 2e       	mov	r15, r22
	//motor = 1, vertical move
	//motor = 0, horizontal move
	if(motor){
 10e:	66 23       	and	r22, r22
 110:	09 f4       	brne	.+2      	; 0x114 <step+0x14>
 112:	47 c0       	rjmp	.+142    	; 0x1a2 <step+0xa2>
		if(number_of_steps >= 0){
 114:	99 23       	and	r25, r25
 116:	0c f1       	brlt	.+66     	; 0x15a <step+0x5a>
			digitalWrite(DIR_PIN1, 0); // Retning fremad
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 42 01 	call	0x284	; 0x284 <digitalWrite>
			for(int16_t i = 0; i < number_of_steps; i++){
 120:	00 e0       	ldi	r16, 0x00	; 0
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	16 c0       	rjmp	.+44     	; 0x152 <step+0x52>
				digitalWrite(STEP_PIN1, 1);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 42 01 	call	0x284	; 0x284 <digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <step+0x32>
 136:	00 c0       	rjmp	.+0      	; 0x138 <step+0x38>
 138:	00 00       	nop
				_delay_us(1000);
				digitalWrite(STEP_PIN1, 0);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 42 01 	call	0x284	; 0x284 <digitalWrite>
 142:	8f e9       	ldi	r24, 0x9F	; 159
 144:	9f e0       	ldi	r25, 0x0F	; 15
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <step+0x46>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <step+0x4c>
 14c:	00 00       	nop
	//motor = 1, vertical move
	//motor = 0, horizontal move
	if(motor){
		if(number_of_steps >= 0){
			digitalWrite(DIR_PIN1, 0); // Retning fremad
			for(int16_t i = 0; i < number_of_steps; i++){
 14e:	0f 5f       	subi	r16, 0xFF	; 255
 150:	1f 4f       	sbci	r17, 0xFF	; 255
 152:	0c 17       	cp	r16, r28
 154:	1d 07       	cpc	r17, r29
 156:	3c f3       	brlt	.-50     	; 0x126 <step+0x26>
 158:	24 c0       	rjmp	.+72     	; 0x1a2 <step+0xa2>
				digitalWrite(STEP_PIN1, 0);
				_delay_us(1000);
			}
		}
		else{
			digitalWrite(DIR_PIN1, 1); // Retning baglens
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 42 01 	call	0x284	; 0x284 <digitalWrite>
			for(int16_t i = 0; i < number_of_steps * -1; i++){
 162:	00 e0       	ldi	r16, 0x00	; 0
 164:	10 e0       	ldi	r17, 0x00	; 0
 166:	16 c0       	rjmp	.+44     	; 0x194 <step+0x94>
				digitalWrite(STEP_PIN1, 1);
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 42 01 	call	0x284	; 0x284 <digitalWrite>
 170:	8f e9       	ldi	r24, 0x9F	; 159
 172:	9f e0       	ldi	r25, 0x0F	; 15
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <step+0x74>
 178:	00 c0       	rjmp	.+0      	; 0x17a <step+0x7a>
 17a:	00 00       	nop
				_delay_us(1000);
				digitalWrite(STEP_PIN1, 0);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 42 01 	call	0x284	; 0x284 <digitalWrite>
 184:	8f e9       	ldi	r24, 0x9F	; 159
 186:	9f e0       	ldi	r25, 0x0F	; 15
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <step+0x88>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <step+0x8e>
 18e:	00 00       	nop
				_delay_us(1000);
			}
		}
		else{
			digitalWrite(DIR_PIN1, 1); // Retning baglens
			for(int16_t i = 0; i < number_of_steps * -1; i++){
 190:	0f 5f       	subi	r16, 0xFF	; 255
 192:	1f 4f       	sbci	r17, 0xFF	; 255
 194:	88 27       	eor	r24, r24
 196:	99 27       	eor	r25, r25
 198:	8c 1b       	sub	r24, r28
 19a:	9d 0b       	sbc	r25, r29
 19c:	08 17       	cp	r16, r24
 19e:	19 07       	cpc	r17, r25
 1a0:	1c f3       	brlt	.-58     	; 0x168 <step+0x68>
				_delay_us(1000);
			}	
		}
	}
		
		if(!motor){
 1a2:	f1 10       	cpse	r15, r1
 1a4:	47 c0       	rjmp	.+142    	; 0x234 <step+0x134>
			if(number_of_steps >= 0){
 1a6:	dd 23       	and	r29, r29
 1a8:	0c f1       	brlt	.+66     	; 0x1ec <step+0xec>
				digitalWrite(DIR_PIN2, 0); // Retning fremad
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	0e 94 42 01 	call	0x284	; 0x284 <digitalWrite>
				for(int16_t i = 0; i < number_of_steps; i++){
 1b2:	00 e0       	ldi	r16, 0x00	; 0
 1b4:	10 e0       	ldi	r17, 0x00	; 0
 1b6:	16 c0       	rjmp	.+44     	; 0x1e4 <step+0xe4>
					digitalWrite(STEP_PIN2, 1);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	0e 94 42 01 	call	0x284	; 0x284 <digitalWrite>
 1c0:	8f e9       	ldi	r24, 0x9F	; 159
 1c2:	9f e0       	ldi	r25, 0x0F	; 15
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <step+0xc4>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <step+0xca>
 1ca:	00 00       	nop
					_delay_us(1000);
					digitalWrite(STEP_PIN2, 0);
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 42 01 	call	0x284	; 0x284 <digitalWrite>
 1d4:	8f e9       	ldi	r24, 0x9F	; 159
 1d6:	9f e0       	ldi	r25, 0x0F	; 15
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <step+0xd8>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <step+0xde>
 1de:	00 00       	nop
	}
		
		if(!motor){
			if(number_of_steps >= 0){
				digitalWrite(DIR_PIN2, 0); // Retning fremad
				for(int16_t i = 0; i < number_of_steps; i++){
 1e0:	0f 5f       	subi	r16, 0xFF	; 255
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	0c 17       	cp	r16, r28
 1e6:	1d 07       	cpc	r17, r29
 1e8:	3c f3       	brlt	.-50     	; 0x1b8 <step+0xb8>
 1ea:	24 c0       	rjmp	.+72     	; 0x234 <step+0x134>
					digitalWrite(STEP_PIN2, 0);
					_delay_us(1000);
				}
			}
		else{
			digitalWrite(DIR_PIN2, 1); // Retning baglens
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	0e 94 42 01 	call	0x284	; 0x284 <digitalWrite>
			for(int16_t i = 0; i < number_of_steps * -1; i++){
 1f4:	00 e0       	ldi	r16, 0x00	; 0
 1f6:	10 e0       	ldi	r17, 0x00	; 0
 1f8:	16 c0       	rjmp	.+44     	; 0x226 <step+0x126>
				digitalWrite(STEP_PIN2, 1);
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 42 01 	call	0x284	; 0x284 <digitalWrite>
 202:	8f e9       	ldi	r24, 0x9F	; 159
 204:	9f e0       	ldi	r25, 0x0F	; 15
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <step+0x106>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <step+0x10c>
 20c:	00 00       	nop
				_delay_us(1000);
				digitalWrite(STEP_PIN2, 0);
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	0e 94 42 01 	call	0x284	; 0x284 <digitalWrite>
 216:	8f e9       	ldi	r24, 0x9F	; 159
 218:	9f e0       	ldi	r25, 0x0F	; 15
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <step+0x11a>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <step+0x120>
 220:	00 00       	nop
					_delay_us(1000);
				}
			}
		else{
			digitalWrite(DIR_PIN2, 1); // Retning baglens
			for(int16_t i = 0; i < number_of_steps * -1; i++){
 222:	0f 5f       	subi	r16, 0xFF	; 255
 224:	1f 4f       	sbci	r17, 0xFF	; 255
 226:	88 27       	eor	r24, r24
 228:	99 27       	eor	r25, r25
 22a:	8c 1b       	sub	r24, r28
 22c:	9d 0b       	sbc	r25, r29
 22e:	08 17       	cp	r16, r24
 230:	19 07       	cpc	r17, r25
 232:	1c f3       	brlt	.-58     	; 0x1fa <step+0xfa>
				digitalWrite(STEP_PIN2, 0);
				_delay_us(1000);
			}
		}
	}		
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000002e4 <_fini>:
 2e4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000002e6 <__funcs_on_exit>:
 2e6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000002e8 <__simulator_exit>:
 2e8:	08 95       	ret

Disassembly of section .text.exit:

000002be <exit>:
 2be:	ec 01       	movw	r28, r24
 2c0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__funcs_on_exit>
 2c4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_fini>
 2c8:	ce 01       	movw	r24, r28
 2ca:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__simulator_exit>
 2ce:	ce 01       	movw	r24, r28
 2d0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Exit>

Disassembly of section .text._Exit:

000002e0 <_Exit>:
 2e0:	0e 94 7e 00 	call	0xfc	; 0xfc <_exit>
