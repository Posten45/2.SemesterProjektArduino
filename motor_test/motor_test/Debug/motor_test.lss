
motor_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000254  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014f9  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ce2  00000000  00000000  00001869  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000688  00000000  00000000  0000254b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00002bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005bc  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a4  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000039c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	02 d0       	rcall	.+4      	; 0xfa <main>
  f6:	ac c0       	rjmp	.+344    	; 0x250 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <main>:
#include <avr/io.h>


int main(void)
{
    motor_setup();
  fa:	02 d0       	rcall	.+4      	; 0x100 <motor_setup>
    while (1) 
    {
	
		loop();
  fc:	22 d0       	rcall	.+68     	; 0x142 <loop>
  fe:	fe cf       	rjmp	.-4      	; 0xfc <main+0x2>

00000100 <motor_setup>:
 100:	84 b1       	in	r24, 0x04	; 4
				digitalWrite(STEP_PIN2, 0);
				_delay_us(1000);
			}
		}
	}
}
 102:	8f 60       	ori	r24, 0x0F	; 15
 104:	84 b9       	out	0x04, r24	; 4
 106:	08 95       	ret

00000108 <digitalWrite>:
 108:	66 23       	and	r22, r22
 10a:	69 f0       	breq	.+26     	; 0x126 <digitalWrite+0x1e>
 10c:	45 b1       	in	r20, 0x05	; 5
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	b9 01       	movw	r22, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <digitalWrite+0x12>
 116:	66 0f       	add	r22, r22
 118:	77 1f       	adc	r23, r23
 11a:	8a 95       	dec	r24
 11c:	e2 f7       	brpl	.-8      	; 0x116 <digitalWrite+0xe>
 11e:	cb 01       	movw	r24, r22
 120:	84 2b       	or	r24, r20
 122:	85 b9       	out	0x05, r24	; 5
 124:	08 95       	ret
 126:	45 b1       	in	r20, 0x05	; 5
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <digitalWrite+0x2c>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	8a 95       	dec	r24
 136:	e2 f7       	brpl	.-8      	; 0x130 <digitalWrite+0x28>
 138:	cb 01       	movw	r24, r22
 13a:	80 95       	com	r24
 13c:	84 23       	and	r24, r20
 13e:	85 b9       	out	0x05, r24	; 5
 140:	08 95       	ret

00000142 <loop>:

// Hovedl?kken
void loop() {
	while (1) {
		// Motor 1 fremad
		digitalWrite(DIR_PIN1, 0); // Retning fremad
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	e0 df       	rcall	.-64     	; 0x108 <digitalWrite>
		for (int x = 0; x < 1450; x++) {
 148:	c0 e0       	ldi	r28, 0x00	; 0
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	13 c0       	rjmp	.+38     	; 0x174 <loop+0x32>
			digitalWrite(STEP_PIN1, 1);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	da df       	rcall	.-76     	; 0x108 <digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f e9       	ldi	r24, 0x9F	; 159
 156:	9f e0       	ldi	r25, 0x0F	; 15
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <loop+0x16>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <loop+0x1c>
 15e:	00 00       	nop
			_delay_us(1000);
			digitalWrite(STEP_PIN1, 0);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	d1 df       	rcall	.-94     	; 0x108 <digitalWrite>
 166:	8f e9       	ldi	r24, 0x9F	; 159
 168:	9f e0       	ldi	r25, 0x0F	; 15
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <loop+0x28>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <loop+0x2e>
 170:	00 00       	nop
// Hovedl?kken
void loop() {
	while (1) {
		// Motor 1 fremad
		digitalWrite(DIR_PIN1, 0); // Retning fremad
		for (int x = 0; x < 1450; x++) {
 172:	21 96       	adiw	r28, 0x01	; 1
 174:	ca 3a       	cpi	r28, 0xAA	; 170
 176:	95 e0       	ldi	r25, 0x05	; 5
 178:	d9 07       	cpc	r29, r25
 17a:	4c f3       	brlt	.-46     	; 0x14e <loop+0xc>
 17c:	8f e1       	ldi	r24, 0x1F	; 31
 17e:	9e e4       	ldi	r25, 0x4E	; 78
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <loop+0x3e>
 184:	00 c0       	rjmp	.+0      	; 0x186 <loop+0x44>
		}

		_delay_us(5000);

		// Motor 1 bagl?ns
		digitalWrite(DIR_PIN1, 1); // Retning bagl?ns
 186:	00 00       	nop
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	bd df       	rcall	.-134    	; 0x108 <digitalWrite>
		for (int x = 0; x < 1450; x++) {
 18e:	c0 e0       	ldi	r28, 0x00	; 0
 190:	d0 e0       	ldi	r29, 0x00	; 0
			digitalWrite(STEP_PIN1, 1);
 192:	13 c0       	rjmp	.+38     	; 0x1ba <loop+0x78>
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	b7 df       	rcall	.-146    	; 0x108 <digitalWrite>
 19a:	8f e9       	ldi	r24, 0x9F	; 159
 19c:	9f e0       	ldi	r25, 0x0F	; 15
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <loop+0x5c>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <loop+0x62>
			_delay_us(1000);
			digitalWrite(STEP_PIN1, 0);
 1a4:	00 00       	nop
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	ae df       	rcall	.-164    	; 0x108 <digitalWrite>
 1ac:	8f e9       	ldi	r24, 0x9F	; 159
 1ae:	9f e0       	ldi	r25, 0x0F	; 15
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <loop+0x6e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <loop+0x74>
 1b6:	00 00       	nop

		_delay_us(5000);

		// Motor 1 bagl?ns
		digitalWrite(DIR_PIN1, 1); // Retning bagl?ns
		for (int x = 0; x < 1450; x++) {
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	ca 3a       	cpi	r28, 0xAA	; 170
 1bc:	95 e0       	ldi	r25, 0x05	; 5
 1be:	d9 07       	cpc	r29, r25
 1c0:	4c f3       	brlt	.-46     	; 0x194 <loop+0x52>
 1c2:	8f e1       	ldi	r24, 0x1F	; 31
 1c4:	9e e4       	ldi	r25, 0x4E	; 78
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <loop+0x84>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <loop+0x8a>
		}

		_delay_us(5000);

		// Motor 2 fremad
		digitalWrite(DIR_PIN2, 0); // Retning fremad
 1cc:	00 00       	nop
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	83 e0       	ldi	r24, 0x03	; 3
		for (int x = 0; x < 1450; x++) {
 1d2:	9a df       	rcall	.-204    	; 0x108 <digitalWrite>
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
			digitalWrite(STEP_PIN2, 1);
 1d8:	13 c0       	rjmp	.+38     	; 0x200 <loop+0xbe>
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	94 df       	rcall	.-216    	; 0x108 <digitalWrite>
 1e0:	8f e9       	ldi	r24, 0x9F	; 159
 1e2:	9f e0       	ldi	r25, 0x0F	; 15
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <loop+0xa2>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <loop+0xa8>
			_delay_us(1000);
			digitalWrite(STEP_PIN2, 0);
 1ea:	00 00       	nop
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	8b df       	rcall	.-234    	; 0x108 <digitalWrite>
 1f2:	8f e9       	ldi	r24, 0x9F	; 159
 1f4:	9f e0       	ldi	r25, 0x0F	; 15
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <loop+0xb4>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <loop+0xba>
 1fc:	00 00       	nop

		_delay_us(5000);

		// Motor 2 fremad
		digitalWrite(DIR_PIN2, 0); // Retning fremad
		for (int x = 0; x < 1450; x++) {
 1fe:	21 96       	adiw	r28, 0x01	; 1
 200:	ca 3a       	cpi	r28, 0xAA	; 170
 202:	95 e0       	ldi	r25, 0x05	; 5
 204:	d9 07       	cpc	r29, r25
 206:	4c f3       	brlt	.-46     	; 0x1da <loop+0x98>
 208:	8f e1       	ldi	r24, 0x1F	; 31
 20a:	9e e4       	ldi	r25, 0x4E	; 78
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <loop+0xca>
		}

		_delay_us(5000);

		// Motor 2 bagl?ns
		digitalWrite(DIR_PIN2, 1); // Retning bagl?ns
 210:	00 c0       	rjmp	.+0      	; 0x212 <loop+0xd0>
 212:	00 00       	nop
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	83 e0       	ldi	r24, 0x03	; 3
		for (int x = 0; x < 1450; x++) {
 218:	77 df       	rcall	.-274    	; 0x108 <digitalWrite>
 21a:	c0 e0       	ldi	r28, 0x00	; 0
 21c:	d0 e0       	ldi	r29, 0x00	; 0
			digitalWrite(STEP_PIN2, 1);
 21e:	13 c0       	rjmp	.+38     	; 0x246 <loop+0x104>
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	71 df       	rcall	.-286    	; 0x108 <digitalWrite>
 226:	8f e9       	ldi	r24, 0x9F	; 159
 228:	9f e0       	ldi	r25, 0x0F	; 15
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <loop+0xe8>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <loop+0xee>
			_delay_us(1000);
			digitalWrite(STEP_PIN2, 0);
 230:	00 00       	nop
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	68 df       	rcall	.-304    	; 0x108 <digitalWrite>
 238:	8f e9       	ldi	r24, 0x9F	; 159
 23a:	9f e0       	ldi	r25, 0x0F	; 15
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <loop+0xfa>
 240:	00 c0       	rjmp	.+0      	; 0x242 <loop+0x100>
 242:	00 00       	nop

		_delay_us(5000);

		// Motor 2 bagl?ns
		digitalWrite(DIR_PIN2, 1); // Retning bagl?ns
		for (int x = 0; x < 1450; x++) {
 244:	21 96       	adiw	r28, 0x01	; 1
 246:	ca 3a       	cpi	r28, 0xAA	; 170
 248:	95 e0       	ldi	r25, 0x05	; 5
 24a:	d9 07       	cpc	r29, r25
 24c:	4c f3       	brlt	.-46     	; 0x220 <loop+0xde>
 24e:	ff cf       	rjmp	.-2      	; 0x24e <loop+0x10c>

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
